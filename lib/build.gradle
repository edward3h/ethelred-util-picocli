
plugins {
	// Apply the groovy plugin to also add support for Groovy (needed for Spock)
	id 'groovy'

	// Apply the java-library plugin for API and implementation separation.
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

dependencies {
	// Use the latest Groovy version for Spock testing
	testImplementation 'org.codehaus.groovy:groovy:3.0.7'

	// Use the awesome Spock testing and specification framework even with Java
	testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
	testImplementation 'junit:junit:4.13.2'

	// This dependency is exported to consumers, that is to say found on their compile classpath.
	api 'org.apache.commons:commons-math3:3.6.1'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	implementation 'com.google.guava:guava:30.1-jre'

	api 'info.picocli:picocli:4.6.1'
}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId = 'util-picocli'

			from components.java

			pom {
				name = 'Ethelred Picocli Util'
				description = 'Utility classes to work with Picocli.'
				url = 'https://github.com/edward3h/ethelred-util-picocli'
				licenses {
					license {
						name = 'GNU General Public License, Version 3'
						url = 'https://choosealicense.com/licenses/gpl-3.0/'
					}
				}
				developers {
					developer {
						name = 'Edward Harman'
						email = 'jaq@ethelred.org'
					}
				}
				scm {
					connection = "https://github.com/edward3h/ethelred-util-picocli.git"
					developerConnection = "git@github.com:edward3h/ethelred-util-picocli.git"
					url = "https://github.com/edward3h/ethelred-util-picocli"
				}
			}
		}
	}

	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/edward3h/ethelred-util-picocli"
			credentials {
				username = findProperty('github.user') ?:  System.getenv("GITHUB_ACTOR")
				password = findProperty('github.token') ?:  System.getenv("GITHUB_TOKEN")
			}
		}
		maven {
			name = "OSSRH"
			url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials {
				username = findProperty('ossrhUsername') ?: System.getenv("MAVEN_USER")
				password = findProperty('ossrhPassword') ?: System.getenv("MAVEN_PASSWORD")
			}
		}
	}
}

signing {
	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.maven
}

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}